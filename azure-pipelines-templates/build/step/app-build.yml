parameters:
  # if SonarCloud set to true you will need to manually create the project in SonarCloud by clicking '+' then 'Analyze new project` in https://sonarcloud.io/organizations/educationandskillsfundingagency/projects
  SonarCloud: true
  SonarCloudExtraProperties:
  RunAcceptanceTests: true
  SonarCloudProjectKey: ''
  TargetProjects: 'src/**/*.csproj'
  UnitTestProjects: '**/*UnitTests.csproj'
  AcceptanceTestProjects: '**/*.AcceptanceTests.csproj'
  ContinueOnVulnerablePackageScanError: false
  AzureArtifactsFeed: ''

- task: SonarCloudPrepare@3
  displayName: Prepare SonarCloud analysis configuration
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    SonarCloud: ESFA - SonarCloud
    organization: $(SonarCloudOrganisationKey)
    scannerMode: dotnet
    projectName: "$(Build.DefinitionName)"
    ${{ if eq(parameters.SonarCloudProjectKey, '') }}:
      projectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
    ${{ else }}:
      projectKey: ${{ parameters.SonarCloudProjectKey }}
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml
      ${{ parameters.SonarCloudExtraProperties }}

- task: DotNetCoreCLI@2
  condition: eq('${{ parameters.AzureArtifactsFeed }}', '')
  displayName: Restore
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true

- task: DotNetCoreCLI@2
  condition: ne('${{ parameters.AzureArtifactsFeed }}', '')
  displayName: Restore - Including Custom Feed
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true
    feedsToUse: 'select'
    vstsFeed: ${{ parameters.AzureArtifactsFeed }}
    includeNuGetOrg: true

- pwsh: |
    $TargetPatterns = "${{ parameters.TargetProjects }}".Trim().Split("`n")
    $TargetPatterns
    $ErrorFound = $false
    $TargetPatterns | ForEach-Object {
      $Projects = Get-ChildItem -Path $_ -Recurse
      foreach ($Project in $Projects) {
        dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
        if (([Version](dotnet --version)).Major -ge 5) {
          dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
        }
        $Errors = $Deprecated + $Vulnerable | Select-String '>'

        if ($Errors.Count -gt 0) {
          $ErrorFound = $true
        }
      }
    }

    if($ErrorFound){
        Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]true"
        $(exit 1)
    }
    else {
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]false"
        $(exit 0)
    }
  displayName: Package Scanning
  continueOnError: ${{ parameters.ContinueOnVulnerablePackageScanError }}

- task: Bash@3
  displayName: 'PR Commenting'
  condition: and(succeeded(), eq(variables.VulnerablePackagesDetected, 'true'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables.PullRequestVulnerabilitiesCommentTaskEnabled, 'true'))
  env:
    GH_APP_TOKEN: $(GitHubAppAccessToken)
    PR_NUMBER: $(System.PullRequest.PullRequestNumber)
    REPO_NAME: $(Build.Repository.Name)
    AUTHOR: $(Build.SourceVersionAuthor)
    TAGGED_USERS: $(PullRequestVulnerabilitiesDetectedTaggedUsers)
  inputs:
    targetType: 'inline'
    script: |
      echo "üîê Logging into GitHub CLI..."
      echo "$GH_APP_TOKEN" | gh auth login --with-token

      if gh pr comment "$PR_NUMBER" \
        --repo "$REPO_NAME" \
        --body "üîí Please remember to check any packages used by this application to ensure they are up to date @$AUTHOR. cc/ $TAGGED_USERS"; then
          echo "‚úÖ Comment posted successfully to PR #$PR_NUMBER"
      else
          echo "##vso[task.logissue type=warning]GitHub PR comment failed."
          echo "‚ö†Ô∏è  Comment could not be posted to PR #$PR_NUMBER"
      fi

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects:  ${{ parameters.TargetProjects }}
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Unit Tests
  inputs:
    command: test
    projects: ${{ parameters.UnitTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: DotNetCoreCLI@2
  displayName: Acceptance Tests
  condition: ${{ parameters.RunAcceptanceTests }}
  inputs:
    command: test
    projects: ${{ parameters.AcceptanceTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: SonarCloudAnalyze@3
  displayName: Run SonarCloud analysis
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))

- task: SonarCloudPublish@3
  displayName: Publish SonarCloud analysis results on build summary
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    pollingTimeoutSec: '300'
