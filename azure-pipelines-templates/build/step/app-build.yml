parameters:
  # if SonarCloud set to true you will need to manually create the project in SonarCloud by clicking '+' then 'Analyze new project` in https://sonarcloud.io/organizations/educationandskillsfundingagency/projects
  SonarCloud: true
  SonarCloudExtraProperties:
  RunAcceptanceTests: true
  SonarCloudProjectKey: ''
  TargetProjects: 'src/**/*.csproj'
  UnitTestProjects: '**/*UnitTests.csproj'
  AcceptanceTestProjects: '**/*.AcceptanceTests.csproj'
  ContinueOnVulnerablePackageScanError: false

steps:
- task: SonarCloudPrepare@1
  displayName: Prepare SonarCloud analysis configuration
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    SonarCloud: ESFA - SonarCloud
    organization: $(SonarCloudOrganisationKey)
    scannerMode: MSBuild
    projectName: "$(Build.DefinitionName)"
    ${{ if eq(parameters.SonarCloudProjectKey, '') }}:
      projectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
    ${{ else }}:
      projectKey: ${{ parameters.SonarCloudProjectKey }}
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml
      ${{ parameters.SonarCloudExtraProperties }}

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true

- pwsh: |
    $TargetPatterns = "${{ parameters.TargetProjects }}".Trim().Split("`n")
    $TargetPatterns
    $ErrorFound = $false
    $TargetPatterns | ForEach-Object {
      $Projects = Get-ChildItem -Path $_ -Recurse
      foreach ($Project in $Projects) {
        dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
        if (([Version](dotnet --version)).Major -ge 5) {
          dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
        }
        $Errors = $Deprecated + $Vulnerable | Select-String '>'

        if ($Errors.Count -gt 0) {
          $ErrorFound = $true
        }
      }
    }

    if($ErrorFound){
        Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]true"
        $(exit 1)
    } 
    else {
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]false"
        $(exit 0)
    }
  displayName: Package Scanning
  continueOnError: ${{ parameters.ContinueOnVulnerablePackageScanError }}

- task: DownloadSecureFile@1
  name: DownloadDasGitHubAppPrivateKey
  displayName: 'Download DAS GitHub App private key'
  inputs:
    secureFile: 'das-github-app-private-key.pem'

- pwsh: |
    $null = Register-PackageSource -Name NuGet -Location https://api.nuget.org/v3/index.json -ProviderName NuGet
    #NOTE: Install-Package with -SkipDependencies flag used until PowerShellGet v3 can be used to only install Octokit and GitHubJwt along with their dependencies.
    #NOTE: https://github.com/PowerShell/PowerShellGet/issues/487#issue-1000366159
    $null = Install-Package -Name "Octokit" -RequiredVersion "4.0.0" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
    $null = Install-Package -Name "GitHubJwt" -RequiredVersion "0.0.5" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
    $null = Install-Package -Name "jose-jwt" -RequiredVersion "4.0.1" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
    $null = Install-Package -Name "BouncyCastle.NetCore" -RequiredVersion "1.9.0" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies

    $OctokitDll = "$(Agent.TempDirectory)/packages/Octokit.4.0.0/lib/netstandard2.0/Octokit.dll"
    $GitHubJwtDll = "$(Agent.TempDirectory)/packages/GitHubJwt.0.0.5/lib/netstandard2.0/GitHubJwt.dll"
    $JoseJwtDll = "$(Agent.TempDirectory)/packages/jose-jwt.4.0.1/lib/netstandard2.1/jose-jwt.dll"
    $BouncyCastleCryptoDll = "$(Agent.TempDirectory)/packages/BouncyCastle.NetCore.1.9.0/lib/netstandard2.0/BouncyCastle.Crypto.dll"

    $null = Add-Type -Path $OctokitDll
    $null = Add-Type -Path $GitHubJwtDll
    $null = Add-Type -Path $JoseJwtDll
    $null = Add-Type -Path $BouncyCastleCryptoDll

    $PrivateKey = [GitHubJwt.FilePrivateKeySource]::new("$(DownloadDasGitHubAppPrivateKey.secureFilePath)")
    $GitHubJwtFactoryOptions = [GitHubJwt.GitHubJwtFactoryOptions]::new()
    $GitHubJwtFactoryOptions.AppIntegrationId = $(DasGitHubAppId)
    $GitHubJwtFactoryOptions.ExpirationSeconds = 60
    $Generator = [GitHubJwt.GitHubJwtFactory]::new($PrivateKey, $GitHubJwtFactoryOptions)
    $JwtToken = $Generator.CreateEncodedJwtToken()

    $AppClient = [Octokit.GitHubClient]::new([Octokit.ProductHeaderValue]::new("das-github-app"))
    $AppClient.Credentials = [Octokit.Credentials]::new($JwtToken, ([Octokit.AuthenticationType]::Bearer))
    $Response = $AppClient.GitHubApps.CreateInstallationToken($(DasGitHubAppInstallationId)).Result

    $PullRequestComment = "Please remember to check any packages used by this application to ensure they are up to date @$(Build.SourceVersionAuthor). cc/ $(PullRequestVulnerabilitiesDetectedTaggedUsers)"

    $InstallationClient = [Octokit.GithubClient]::new([Octokit.ProductHeaderValue]::new("das-github-app-installation"))
    $InstallationClient.Credentials = [Octokit.Credentials]::new($Response.Token)
    $InstallationClient.Issue.Comment.Create("$(Build.Repository.Name)".Split('/')[0], "$(Build.Repository.Name)".Split('/')[1], $(System.PullRequest.PullRequestNumber), $PullRequestComment)
  displayName: Pull Request Commenting
  condition: and(succeeded(), eq(variables.VulnerablePackagesDetected, 'true'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables.PullRequestVulnerabilitiesCommentTaskEnabled, 'true'))

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects:  ${{ parameters.TargetProjects }}
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Unit Tests
  inputs:
    command: test
    projects: ${{ parameters.UnitTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: DotNetCoreCLI@2
  displayName: Acceptance Tests
  condition: ${{ parameters.RunAcceptanceTests }}
  inputs:
    command: test
    projects: ${{ parameters.AcceptanceTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: SonarCloudAnalyze@1
  displayName: Run SonarCloud analysis
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))

- task: SonarCloudPublish@1
  displayName: Publish SonarCloud analysis results on build summary
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    pollingTimeoutSec: '300'
