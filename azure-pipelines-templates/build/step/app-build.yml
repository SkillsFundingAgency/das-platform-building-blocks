parameters:
  # if SonarCloud set to true you will need to manually create the project in SonarCloud by clicking '+' then 'Analyze new project` in https://sonarcloud.io/organizations/educationandskillsfundingagency/projects
  SonarCloud: true
  SonarCloudExtraProperties:
  RunAcceptanceTests: true
  SonarCloudProjectKey: ''
  TargetProjects: 'src/**/*.csproj'
  UnitTestProjects: '**/*UnitTests.csproj'
  AcceptanceTestProjects: '**/*.AcceptanceTests.csproj'

steps:
- task: SonarCloudPrepare@1
  displayName: Prepare SonarCloud analysis configuration
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    SonarCloud: ESFA - SonarCloud
    organization: $(SonarCloudOrganisationKey)
    scannerMode: MSBuild
    projectName: "$(Build.DefinitionName)"
    ${{ if eq(parameters.SonarCloudProjectKey, '') }}:
      projectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
    ${{ else }}:
      projectKey: ${{ parameters.SonarCloudProjectKey }}
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml
      ${{ parameters.SonarCloudExtraProperties }}

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true

- pwsh: |
    $TargetPatterns = "${{ parameters.TargetProjects }}".Split("`n")
    $TargetPatterns | ForEach-Object {
      $Projects = Get-ChildItem -Path $_ -Recurse
      $ErrorFound = $false
      foreach ($Project in $Projects) {
        dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
        if (([Version](dotnet --version)).Major -ge 5) {
          dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
        }
        $Errors = $Deprecated + $Vulnerable | Select-String '>'

        if ($Errors.Count -gt 0) {
          Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
          $ErrorFound = $true
        }
      }
      $ErrorFound ? $(exit 1) : $(exit 0)
    }
  displayName: Package Scanning
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects:  ${{ parameters.TargetProjects }}
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Unit Tests
  inputs:
    command: test
    projects: ${{ parameters.UnitTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: DotNetCoreCLI@2
  displayName: Acceptance Tests
  condition: ${{ parameters.RunAcceptanceTests }}
  inputs:
    command: test
    projects: ${{ parameters.AcceptanceTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: SonarCloudAnalyze@1
  displayName: Run SonarCloud analysis
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))

- task: SonarCloudPublish@1
  displayName: Publish SonarCloud analysis results on build summary
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    pollingTimeoutSec: '300'
