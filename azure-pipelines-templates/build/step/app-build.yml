parameters:
  # if SonarCloud set to true you will need to manually create the project in SonarCloud by clicking '+' then 'Analyze new project` in https://sonarcloud.io/organizations/educationandskillsfundingagency/projects
  SonarCloud: true
  SonarCloudExtraProperties:
  RunAcceptanceTests: true
  SonarCloudProjectKey: ''
  TargetProjects: 'src/**/*.csproj'
  UnitTestProjects: '**/*UnitTests.csproj'
  AcceptanceTestProjects: '**/*.AcceptanceTests.csproj'
  ContinueOnVulnerablePackageScanError: false
  AzureArtifactsFeed: ''

steps:
- task: SonarCloudPrepare@3
  displayName: Prepare SonarCloud analysis configuration
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    SonarCloud: ESFA - SonarCloud
    organization: $(SonarCloudOrganisationKey)
    scannerMode: dotnet
    projectName: "$(Build.DefinitionName)"
    ${{ if eq(parameters.SonarCloudProjectKey, '') }}:
      projectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
    ${{ else }}:
      projectKey: ${{ parameters.SonarCloudProjectKey }}
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml
      ${{ parameters.SonarCloudExtraProperties }}

- task: DotNetCoreCLI@2
  condition: eq('${{ parameters.AzureArtifactsFeed }}', '')
  displayName: Restore
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true

- task: DotNetCoreCLI@2
  condition: ne('${{ parameters.AzureArtifactsFeed }}', '')
  displayName: Restore - Including Custom Feed
  inputs:
    command: restore
    projects: ${{ parameters.TargetProjects }}
    noCache: true
    feedsToUse: 'select'
    vstsFeed: ${{ parameters.AzureArtifactsFeed }}
    includeNuGetOrg: true

- pwsh: |
    $TargetPatterns = "${{ parameters.TargetProjects }}".Trim().Split("`n")
    $TargetPatterns
    $ErrorFound = $false
    $TargetPatterns | ForEach-Object {
      $Projects = Get-ChildItem -Path $_ -Recurse
      foreach ($Project in $Projects) {
        dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
        if (([Version](dotnet --version)).Major -ge 5) {
          dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
        }
        $Errors = $Deprecated + $Vulnerable | Select-String '>'

        if ($Errors.Count -gt 0) {
          $ErrorFound = $true
        }
      }
    }

    if($ErrorFound){
        Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]true"
        $(exit 1)
    }
    else {
        Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]false"
        $(exit 0)
    }
  displayName: Package Scanning
  continueOnError: ${{ parameters.ContinueOnVulnerablePackageScanError }}

- task: DownloadSecureFile@1
  name: DownloadDasGitHubAppPrivateKey
  displayName: 'Download DAS GitHub App private key'
  inputs:
    secureFile: 'das-github-app-private-key.pem'

- pwsh: |
    $AppId = $env:DasGitHubAppId
    $InstallationId = $env:DasGitHubAppInstallationId
    $PrivateKeyPath = "$(DownloadDasGitHubAppPrivateKey.secureFilePath)"
    $RepoName = $env:Build_Repository_Name
    $Author = $env:Build_SourceVersionAuthor
    $TaggedUsers = $env:PullRequestVulnerabilitiesDetectedTaggedUsers
    $PRNumber = $env:System_PullRequest_PullRequestNumber

    function Get-JwtToken {
      Add-Type -AssemblyName System.Security.Cryptography
      $rsa = [System.Security.Cryptography.RSA]::Create()
      $pem = Get-Content $PrivateKeyPath -Raw
      $rsa.ImportFromPem($pem)

      $header = @{
        alg = "RS256"
        typ = "JWT"
      }
      $payload = @{
        iat = [int][double]::Parse((Get-Date -Date (Get-Date).ToUniversalTime() -UFormat %s))
        exp = [int][double]::Parse((Get-Date -Date (Get-Date).ToUniversalTime().AddMinutes(10) -UFormat %s))
        iss = $AppId
      }

      $toBase64 = {
        param($obj)
        $json = ($obj | ConvertTo-Json -Compress)
        $bytes = [System.Text.Encoding]::UTF8.GetBytes($json)
        [Convert]::ToBase64String($bytes).TrimEnd('=').Replace('+','-').Replace('/','_')
      }

      $headerEncoded = &$toBase64 $header
      $payloadEncoded = &$toBase64 $payload
      $data = "$headerEncoded.$payloadEncoded"

      $signature = $rsa.SignData(
        [System.Text.Encoding]::UTF8.GetBytes($data),
        [System.Security.Cryptography.HashAlgorithmName]::SHA256,
        [System.Security.Cryptography.RSASignaturePadding]::Pkcs1
      )
      $sigEncoded = [Convert]::ToBase64String($signature).TrimEnd('=').Replace('+','-').Replace('/','_')

      return "$data.$sigEncoded"
    }

    $jwt = Get-JwtToken

    $accessTokenResponse = Invoke-RestMethod -Method POST `
      -Uri "https://api.github.com/app/installations/$InstallationId/access_tokens" `
      -Headers @{ 
        Authorization = "Bearer $jwt"
        Accept = "application/vnd.github+json"
        "User-Agent" = "das-github-app"
      }

    $accessToken = $accessTokenResponse.token

    $owner, $repo = $RepoName -split '/'
    $commentBody = @{
      body = "Please remember to check any packages used by this application to ensure they are up to date @$Author. cc/ $TaggedUsers"
    } | ConvertTo-Json

    Invoke-RestMethod -Method POST `
      -Uri "https://api.github.com/repos/$owner/$repo/issues/$PRNumber/comments" `
      -Headers @{
        Authorization = "token $accessToken"
        Accept = "application/vnd.github+json"
        "User-Agent" = "das-github-app"
      } `
      -Body $commentBody
  displayName: 'Pull Request Commenting'
  condition: and(succeeded(), eq(variables.VulnerablePackagesDetected, 'true'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables.PullRequestVulnerabilitiesCommentTaskEnabled, 'true'))

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects:  ${{ parameters.TargetProjects }}
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Unit Tests
  inputs:
    command: test
    projects: ${{ parameters.UnitTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: DotNetCoreCLI@2
  displayName: Acceptance Tests
  condition: ${{ parameters.RunAcceptanceTests }}
  inputs:
    command: test
    projects: ${{ parameters.AcceptanceTestProjects }}
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

- task: SonarCloudAnalyze@3
  displayName: Run SonarCloud analysis
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))

- task: SonarCloudPublish@3
  displayName: Publish SonarCloud analysis results on build summary
  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
  inputs:
    pollingTimeoutSec: '300'
