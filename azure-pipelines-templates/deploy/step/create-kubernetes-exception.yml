parameters:
  AksResourceGroupName:
  AzureSubscription:
  AksClusterName:
  Exception:
  ExceptionFile:
  Validate: false
  IsMultiRepoCheckout: true

steps:
- task: Kubernetes@1
  displayName: kubectl get crd ${{ parameters.Exception }}
  name: GetException
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.AzureSubscription }}
    azureResourceGroup: ${{ parameters.AksResourceGroupName }}
    kubernetesCluster: ${{ parameters.AKSClusterName }}
    useClusterAdmin: true
    command: 'get'
    arguments: 'crd ${{ parameters.Exception }} --all-namespaces --ignore-not-found'
- task: PowerShell@2
  displayName: 'PowerShell: Test-KubernetesExceptionExists.ps1'
  inputs:
    targetType: 'filePath'
    ${{ if eq(parameters.IsMultiRepoCheckout, true) }}:
      filePath: das-platform-automation/Infrastructure-Scripts/Test-KubernetesExceptionExists.ps1
    ${{ if eq(parameters.IsMultiRepoCheckout, false) }}:
      filePath: Infrastructure-Scripts/Test-KubernetesNamespaceExists.ps1
    arguments: -KubectlOutput '$(GetException.KubectlOutput)' -ExceptionName ${{ parameters.Exception }} -Verbose
- task: Kubernetes@1
  displayName: kubectl apply ${{ parameters.Exception }}
  condition: and(succeeded(), eq(variables.ExceptionExists, 'true'), eq('${{ parameters.Validate }}', false))
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.AzureSubscription }}
    azureResourceGroup: ${{ parameters.AksResourceGroupName }}
    kubernetesCluster: ${{ parameters.AKSClusterName }}
    useClusterAdmin: true
    command: 'apply'
    arguments: '-f ${{ parameters.ExceptionFile }}'
